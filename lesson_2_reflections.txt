###Reflect: Initializing a Repository
What happens when you initialize a repository? Why do you need to do it?
Git creates a .git folder that contains a repository of all the files in the directory.  There is also "meta-data" that keeps track of changes and commits.  If you don't initialize a repository, you won't be able to make a commit.

###Reflect: Staging Area
How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging is like an intermediary between the working directory and the repository.  It is temporary and but the files present and the description are recorded to give a snapshot of the commit.  The working directory is still where you get most of you work done.  In fact the repository almost looks like the working directory but for the hidden files.

###Reflect: Commit Size
How can you use the staging area to make sure you have one commit per logical change?
It seems like you would commit for every logical change but if you have to go back and fix a file that you had previously thought was fixed only to realize while working on another file that more changes were needed, then you can re-add that file or remove it.  The staging area also organizes which files need to be changed.  It seems quite useful.

###Reflect: When to Use Branches
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are good to add when you want to do an experimental program or a weird version of something.  It helps you make aggressive changes to the underlying structures of programs so you don't have to take microsteps before each commit.

###Reflect: Visualizing with Diagrams
How do the diagrams help you visualize the branch structure?
They just do.  That is by design.  It is quite remarkable the level of visualization that can take place in a terminal window.  Not only do they show a linear progression of improvements on the master branch, they can also show the branches in the repository.  Now you can figure out who is working on what.

###Reflect: Merging Two Branches
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging branches adds all the changes in the branches together.  If you are merging with the master branch, it will create a new tip on the diagram.

